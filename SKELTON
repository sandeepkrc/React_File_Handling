###################  BASIC IDEA FOR FILE HANDLING IN REACT AND DJANGO   ==============    WORK IN PROGRESS===========================
1. Decleare State for file field
     
     
     file_upload :null ,// intIALLY NULL 
 
 
 
 
 2.
 
 <label>
                      file :
                      <input type="file" 
                      onChange={this.resource_files_handler}

                      
                      />
                    </label>
  =========================================================================================================
 3. handler function
 
 
  resource_files_handler = (e)=>{
    this.setState({ rfiles: e.target.files[0] });
    console.log("----",e.target.files[0]['name'])// to get file name

  }
  
  
  
  
  
  
  
  ===========================================
 4.. onsubmit function 
  
  
  resources = ()=> {
      const formData = new FormData();
      formData.append("group_id", this.state.groupId);
      formData.append("ref_name", this.state.title);
      formData.append("files", this.state.rfiles);
      formData.append("notes", this.state.notes);
      formData.append("user_id", this.props.currentUser.learnerId);
   
    UserServices.ResourceAdd(formData).then((res)=>{
      console.log("res==========",res)

    }).catch((error)=>{
      console.log("error =",error)

    })

  }

  
  
  
  
  
  ========GETTING IN BACKEND DRF================================
  
  
  class ResourceView(APIView):
    serializer_class = ResourseSerializer
    queryset = Resources.objects.all()
    def post(self,request):
        files=request.FILES.get('files') 
        print(files)
        print(files.name)
        # decrypted_data = json.loads(enc_dec_obj.decrypt_text(request.data))
        # serializer = self.serializer_class(instance=instance, data=decrypted_data)
        public_url = upload_content_blob(settings.GOOGLE_CLOUD_STORAGE_BUCKET,files, files.name)
        request.data["files"] = public_url  #reset the dictnory of key files with public url(text field)
        serializer = self.serializer_class(data=request.data)
        if serializer.is_valid():
                serializer.save()
                res={"status":"success",'message': 'Notes Save successfully'}
                encrypted_data = enc_dec_obj.encrypt_text(json.dumps(res))
                return Response({'data': encrypted_data})
                # return Response({'data': serializer.data})
        else:
            res = {'status': 'false',
                   'message': 'Some Error'}
            encrypted_data = enc_dec_obj.encrypt_text(json.dumps(res))
            return Response({"data":encrypted_data})
     
  
  
